AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Single API Gateway with Multiple Lambda Functions

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  ApiUser:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /hello
            Method: get

  GetAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_admin/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        AnotherEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /admin
            Method: get

  DeleteAdminFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: delete_admin/
        Handler: app.lambda_handler
        Runtime: python3.11
        Architectures:
          - x86_64
        Events:
          AnotherEvent:
            Type: Api
            Properties:
              RestApiId: !Ref MyApi
              Path: /admin/delete
              Method: delete

  PostAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post_admin/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        AnotherEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /admin/post
            Method: post

  PutAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: put_admin/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        AnotherEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /admin/put
            Method: put

  ## fUNCTIONS USERS

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_user/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        AnotherEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiUser
            Path: /user
            Method: get

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete_user/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        AnotherEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiUser
            Path: /user/delete
            Method: delete

  PostUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post_user/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        AnotherEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiUser
            Path: /user/post
            Method: post


  PutUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: put_user/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        AnotherEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiUser
            Path: /user/put
            Method: put
                  
  GitHubActions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: github_actions/
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          AWS_ACCESS_KEY_ID: !Ref AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: !Ref AWS_SECRET_ACCESS_KEY
          SONAR_TOKEN: !Ref SONAR_TOKEN



Outputs:
  MyApiUrl:
    Description: "API Gateway endpoint URL for Prod ADMIN"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  GetAdminFunction:
    Description: "Get Admin Function Lambda Function ARN"
    Value: !GetAtt GetAdminFunction.Arn
  DeleteAdminFunction:
    Description: "Delete Admin Function Lambda Function ARN"
    Value: !GetAtt DeleteAdminFunction.Arn
  PostAdminFunction:
    Description: "Post Admin Function Lambda Function ARN"
    Value: !GetAtt PostAdminFunction.Arn
  PutAdminFunction:
      Description: "Put Admin Function Lambda Function ARN"
      Value: !GetAtt PutAdminFunction.Arn

  ApiUserUrl:
    Description: "API Gateway endpoint URL for Prod USER"
    Value: !Sub "https://${ApiUser}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  GetUserFunction:
    Description: "Get User Function Lambda Function ARN"
    Value: !GetAtt  GetUserFunction.Arn
  DeleteUserFunction:
    Description: "Delete User Function Lambda Function ARN"
    Value: !GetAtt DeleteUserFunction.Arn
  PostUserFunction:
    Description: "Post User Function Lambda Function ARN"
    Value: !GetAtt PostUserFunction.Arn
  PutUserFunction:
    Description: "Put User Function Lambda Function ARN"
    Value: !GetAtt  PutUserFunction.Arn

